(define (make-interval p q)
  (cons p q))
(define (get-p i)
  (car i))
(define (get-q i)
  (cdr i))
(define (add a b)
  (make-interval (+ (get-p a) (get-p b))
                 (+ (get-q a) (get-q b))))
(define (multi a b)
  (let ((p1 (* (get-p a) (get-p b)))
        (p2 (* (get-p a) (get-q b)))
        (p3 (* (get-q a) (get-p b)))
        (p4 (* (get-q a) (get-q b))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div a b)
  (if (and (< (get-p b) 0)
           (> (get-q b) 0))
      (display "--!err:cannot div zero")
      (multi a
             (let ((p (/ 1 (get-p b)))
                   (q (/ 1 (get-q b))))
               (make-interval (min p q)
                              (max p q))))))